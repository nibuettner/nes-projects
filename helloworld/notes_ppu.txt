General Info
-------------------------------------------------------------------------------
- Screen resolution: 256x240
- Basic unit of NES graphics is the 8x8 pixel "tile"
- One screen of graphics is 32 tiles wide and 30 tiles tall
  -> 32x30 = 960 tiles

- The NES uses a fixed set of 64 colors for all of its graphics
- These colors are used to fill slots in eight four-color palettes
- Four palettes are used to draw background objects, and the other four palettes are used to draw sprites, objects in the "foreground"
- Each thing drawn to the screen uses one of these palettes, limiting a single graphical object to four of the 64 available colors.

CHR-ROM
-------------------------------------------------------------------------------
- holds 2 pattern tables, one for backgrounds, one for sprites
- each holds 256 8x8 pixel tiles
- each pixel is assigned a 2 bit palette index (0-4)
- thus, a tile will use 128 bit or 16 bytes of memory
- each tile in the table is defined with two "bit planes", specifying which palette color (0-3) is used for each pixel of the tile;
  one bit plane defines the "low bit" of each pixel in the tile, and the other defines the "high bit".

Sprites
-------------------------------------------------------------------------------
- "foreground" layer
- each sprite is a single tile which can be positioned anywhere on the screen
- sprites can also be flipped vertically or horizontally (but not rotated)
- each sprite can specify which of the four sprite palettes it will use.
- the NES can only display 64 sprites at a time
- only eight sprites can be drawn on a scanline (a horizontal row of pixels)
- the PPU uses 256 bytes of memory to store sprite information
- it takes four bytes of data to describe a sprite, which is where the limit of 64 sprites at a time comes from:
  - byte 1: Y position of the top left corner of the sprite (0-255)
  - byte 2: Tile number from the sprite pattern table (0-255)
  - byte 3: Special attribute flags (horizontal/vertical flipping, palette number, etc.)
    #%76543210
      ||||||^^- 0-1 Palette for sprite
      |||^^^--- 2-4 Not used
      ||^------ 5   Sprite priority (behind background if "1")
      |^------- 6   Flips sprite horizontally (if "1")
      ^-------- 7   Flips sprite vertically (if "1")
  - byte 4: X position of the top left corner of the sprite (0-255)
  - within the sprite buffer (and in OAM itself), every four bytes defines one sprite. So, the first eight bytes of the sprite buffer look like this:

    $0200   Y position of sprite 0 (first sprite)
    $0201	  Tile number of sprite 0
    $0202	  Attribute flags for sprite 0
    $0203	  X position of sprite 0
    $0204	  Y position of sprite 1 (second sprite)
    $0205	  Tile number of sprite 1
    $0206	  Attribute flags for sprite 1
    $0207	  X position of sprite 1

  Object Attribute Memory (OAM)
  - the region in PPU memory where sprite data is stored is called "Object Attribute Memory", or "OAM"
  - this region of memory is different in that there are special MMIO addresses that the CPU can use to update the contents of OAM all at once,
    at high speed. Being able to update OAM quickly is a necessity for fast-paced games, so that all 64 sprites can move smoothly every frame.

Backgrounds
-------------------------------------------------------------------------------
- a background can cover the entire screen - 960 8x8 tiles
- but background tiles must fit to a grid
- the background layer can be scrolled in 1-pixel increments

  Nametables
  - backgrounds are defined via nametables, which live in PPU memory
  - each nametable is 32x30 = 960 tiles = 960 bytes
  - each of those bytes stores the tile number of one of the 256 tiles in the background pattern table
  - PPU memory map has space for four nametables arranged in a square pattern BUT
    only two can be used, the other two are "mirrors"
    -> asking for a byte of memory from a mirror returns a byte from the corresponding real nametable
  - nametable addresses: screen 1: $2000, screen 2: $2400, screen 3: $2800, screen 4: $2C00

  Atttribute Tables
  - at the end of each nametable is a 64-byte region called an attribute table
  - specifies which palette to use for each tile of background.
  - 960 + 64 = 1024 bytes, so each nametable/attribute table pair takes one kilobyte of memory
  - each byte of the attribute table specifies the palette colors for sixteen background tiles, in a four-by-four square:

      AABB
      AABB
      CCDD
      CCDD

     DDCCBBAA
     ||||||||
    %01100011
  
  - as a consequence of attribute table limitations, background objects are generally drawn in 2x2 tile units. We call these larger
    objects metatiles.

TRICKS
-------------------------------------------------------------------------------
- Overlapping sprites with transparency can be used for multicolor graphics (??? tbd)