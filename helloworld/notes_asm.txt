Directives
-------------------------------------------------------------------------------
  .segment "<segmentname>"
    dictate where in the finished ROM file certain pieces of code should go

    STARTUP: doesn't actually do anything; it's needed for C code compiled down to 6502 assembly
    HEADER: contains information for emulators about what kind of chips are present in the cartridge.
      is placed at the very beginning of the resulting .nes file.

    The other segments line up to the PRG/CHR split

    CODE: Game code stored in PRG-ROM
    VECTORS: is a way to specify code that should appear at the very end of the PRG-ROM block
    CHARS: represents the entire contents of the CHR-ROM, generally included as a binary file

  .res directive (reserve)
    .res 8192: directive that tells the assembler to "reserve" a certain amount of blank space - in this case, 8,192 bytes

  .byte
    tells the assembler to insert literal data bytes into the output .nes file
    .byte $4e, $45, $53, $1a: writes the string "NES<eof>" into the .nes file

  .proc
    creates lexical scopes in the code; code in a proc is local to the proc;
    labels you make inside of a .proc are unique to that proc

  .addr
    given a label, it outputs the memory address that corresponds to that label
    eg: .addr nmi_handler, reset_handler, irq_handler ;outputs the addresses of the nmi_handler, reset_handler, irq_handler procs

  .include <file>
    includes the code from a file; don't use if file contains opcodes
    -> then use .asm file and export/import

  .incbin <file>
    includes binary file (like .chr files)

  .export <label>
    make a proc available for all other asm files

  .import <label>
    import the definition


OpCodes
-------------------------------------------------------------------------------
  LDA, LDX, LDY          ;load data into a register
  STA, STX, STY          ;store the contents of a register to a memory address
  TAX, TAY, TXA, TYA     ;transfer (copy!) data from one register to another
  INX, INY               ;increase register value by one
  INC <addr>             ;increase the value stored at <addr> by 1
  DEX, DEY               ;decrease register value by one
  DEC <addr>             ;decrease the value stored at <addr> by 1
  JMP                    ;jump to a label (can be a proc name)
  SEI                    ;set interrupt ignore bit - after calling this, interrupts are ignored
  CLD                    ;clear decimal mode bit - disable "binary-coded decimal" mode - actually not used on the NES but still
                         ;called in reset handler "just in case"
  BIT                    ;
  BPL                    ;

  CLC                    ;clear carry bit in processor status register (0) -> do when adding
  SEC                    ;set carry bit in processor status register (1) -> do when subtracting
  ADC <value>            ;add to A with carry; sets carry when overflowing
  SBC <value>            ;subtract from A with carry; clears carry when overflowing


  BEQ <label>            ;branch if equal to zero
  BNE <label>            ;branch if not equal to zero
  BCS <label>            ;branch if carry set
  BCC <label>            ;branch if carry cleared
  CMP <value>            ;compare accumulator with value (A - value)
  CPX <value>            ;compare X register with value (X - value)
  CPY <value>            ;compare Y register with value (Y - value)

  JSR <label>            ;jump to subroutine
  RTS                    ;return from subroutine

  PHA                    ;
  PHP                    ;
  PLA                    ;
  PLP                    ;

Addressing modes
-------------------------------------------------------------------------------
  absolute mode: provide a memory address (eg. $3f00)
    references a single memory address
  zero-page addressing: provide a single-byte memory address (eg. $3b)
    special form of absolute mode; zero-page RAM is much faster than other addresses
  immediate mode: provide an exact value (eg. #$3f)
    references a fixed value
  indexed mode: provide a memory address and a register (eg. $8000,X)
    references a memory address that is <value in register> addresses away from the address provided
  

Memory-Mapped I/O (MMIO) addresses
-------------------------------------------------------------------------------
  in the range $2000-$6000
  special addresses that allow the CPU to communicate with other devices (eg. PPU)

  $2006: PPUADDR
    points to an address in PPU memory that we want to manipulate;
    takes two byte values (high/left and low/right)

    This indicates that we want to manipulate PPU address $3f00:
      LDX #$3f
      STX $2006
      LDX #$00
      STX $2006

  $2007: PPUDATA
    defines what value we want to write to the selected address in PPUADDR

    This loads a value of #$29 into the accumulator and stores it in PPUDATA:
      LDA #$29
      STA $2007
    Each time you store a byte to PPUDATA, the memory address for the next store
    (PPUADDR) is incremented by one

  $2002: PPUSTATUS
    read-only MMIO address; information about what the PPU is currently doing
    also resets the "address latch" for PPUADDR so that the next write to PPUADDR
    is always considered a "high" byte of the address

    Always read from PPUSTATUS before manipulating PPUADDR:
      LDX $2002
      LDX #$3f
      STX $2006
      LDX #$00
      STX $2006
      LDA #$29
      STA $2007

  $2001: PPUMASK
    allows your code to give the PPU instructions about what to draw, as well as set
    some tweaks to how colors are displayed

    #%76543210
      |||||||^- 0 Greyscale mode enable (0: normal color, 1: greyscale)
      ||||||^-- 1 Left edge (8px) background enable (0: hide, 1: show)
      |||||^--- 2 Left edge (8px) foreground enable (0: hide, 1: show)
      ||||^---- 3 Background enable
      |||^----- 4 Foreground enable
      ||^------ 5 Emphasize red
      |^------- 6 Emphasize green
      ^-------- 7 Emphasize blue

  $2000: PPUCTRL
    for now: bit 7 controls whether or not the PPU will trigger an NMI every frame

  $2003: OAMADDR

  $4014: OAMDMA

Interrupt Vectors
-------------------------------------------------------------------------------
  RESET: The reset vector occurs when the system is first turned on, or when the user presses the Reset button on the front of the console.
  NMI: The NMI vector ("Non-Maskable Interrupt") occurs when the PPU starts preparing the next frame of graphics, 60 times per second.
  IRQ: The IRQ vector ("Interrupt Request") can be triggered by the NES' sound processor or from certain types of cartridge hardware.

  Interrupt vectors are stored at the last 6 bytes of memory:
  $fffa-$fffb	Start of NMI handler
  $fffc-$fffd	Start of reset handler
  $fffe-$ffff	Start of IRQ handler
  these addresses will contain the addresses of the procs that are called when the specific interrupt occurs

  Because these six bytes of memory are so important, ca65 has a specific segment type for them:
  .segment "VECTORS"
  .addr nmi_handler, reset_handler, irq_handler

  .proc irq_handler
    ...
    RTI ;return from interrupt
  .endproc

  .proc nmi_handler
    ...
    RTI ;return from interrupt
  .endproc

  .proc reset_handler
    ...
    JMP main ;NO return from interrupt as there is nothing to return to when reset is pushed
  .endproc

Sprites
-------------------------------------------------------------------------------
- first write to CPU spirte buffer, then write to Object Attribute Memory (OAM) in the PPU
- sprite buffer on CPU runs from $0200 to $0300 (256 bytes)
- a sprite is described by 4 bytes of data
  - byte 1: Y position of the top left corner of the sprite (0-255)
  - byte 2: Tile number from the sprite pattern table (0-255)
  - byte 3: Special attribute flags (horizontal/vertical flipping, palette number, etc.)
    #%76543210
      ||||||^^- 0-1 Palette for sprite
      |||^^^--- 2-4 Not used
      ||^------ 5   Sprite priority (behind background if "1")
      |^------- 6   Flips sprite horizontally (if "1")
      ^-------- 7   Flips sprite vertically (if "1")
  - byte 4: X position of the top left corner of the sprite (0-255)
  - so, the first eight bytes of the sprite buffer might look like this:

    $0200   Y position of sprite 0 (first sprite)
    $0201	  Tile number of sprite 0
    $0202	  Attribute flags for sprite 0
    $0203	  X position of sprite 0
    $0204	  Y position of sprite 1 (second sprite)
    $0205	  Tile number of sprite 1
    $0206	  Attribute flags for sprite 1
    $0207	  X position of sprite 1

- Once sprite buffer is ready, we want to transfer it to the PPU:
  $2003: OAMADDR:
    the address in the OAM we want to write to (usually $00 to update all the sprite data in the OAM)
  $4014: OAMDMA:
    initiates the transfer of an entire page of memory into OAM
    writing the high byte of a memory address to OAMDMA will transfer that page
- as OAM in PPU is unstable memory, update OAM every frame (60fps)

The Processor Status Register (P)
-------------------------------------------------------------------------------
- stores results of operations
- 8 bit:
  NV-BDIZC
  |||||||^- 0  Carry flag: did last op cause a carry?
  ||||||^-- 1  Zero flag: was last result zero?
  |||||^--- 2  Interrupt flag
  ||||^---- 3  Decimal flag: not supported by NES
  |||^----- 4  Break flag
  ||^------ 5  Unused
  |^------- 6  Sign overflow flag: Negative number < -128
  ^-------- 7  Negative flag: did last result have 1 in bit 7?

Zero Page
-------------------------------------------------------------------------------

Subroutines
-------------------------------------------------------------------------------
- named, reusable code fragments (functions)
- the stack holds addresses of the program code in addresses $0300 to $03ff
- the stack pointer (S) stores the topmost address of the stack
- when something is added (push) to the stack for the first time, it is stored in $03ff and the
  stack pointer is decremented by one
- when a value is removed from the stack (pop), the stack pointer is incremented by one
- adding more values to the stack will decrease the stack pointer
- when the stack pointer reaches $0300 and another value is added, it "overflows" and overwrites old
  values in the stack -> this is bad! Never have more than 256 addresses in the stack
- there is no variable scope or lifetime in assembly; registers changed in a subroutine are not local
  to the subroutine

1 when the 6502 sees a JSR opcode, it pushes the current value of the program counter
  (the special register that holds the memory address of the next byte to be processed) onto the stack
2 the program continues at the address of the subroutine
3 when the 6502 sees an RTS it uses the top address of the stack (pop) to return back to the original code address
  and continue execution from there

  Subroutine Register Management
    - when using subroutines, we want to preserve the status of the CPU before making changes to it and
      at the end of the subroutine, restore that status
    - we can use the opcodes PHA, and PHP to push the values in the accumulator (A) and the processor status register (P)
      to the stack and...
    - ... PLA and PLP to pull the top value from the stack and store it in the accumulator (A) or the
      processor status register (P)
    - there are no respective functions for the X and Y register, so we need to transfer those values to A before
      pushing them to the stack
    - order is important!

    .proc my_subroutine
      PHP              ;store processor status register on stack
      PHA              ;store accumulator value on stack
      TXA              ;transfer X register to A
      PHA              ;push A (which now contains the value of X) to the stack
      TYA              ;transfer Y register to A
      PHA              ;push A (which now contains the value of Y) to the stack

      ;your actual subroutine code here
      ;we can now work with X, Y, A and P because we are sure we can restore everything in the end

      ;restore things in reverse order
      PLA              ;load top value from stack and store it in A (we know this has to be the original Y value)
      TAY              ;put the value in A into Y
      PLA              ;load top value from stack and store it in A (we know this has to be the original X value)
      TAX              ;put the value in A into X
      PLA              ;load top value from stack and store it in A (this is now the original A)
      PLP              ;load top value from stack and store it in P (this is now the original P)
      RTS              ;return
    .endproc


IMPORTANT NOTES
-------------------------------------------------------------------------------
Branching
- when using branching opcode, you cannot branch to labels further away than 127 bytes
  before or 128 bytes after the branch instruction; reason is that the the data that follows a branch
  command is not a memory address but a signed one-byte number that is added to whatever memory
  address is in the program counter; this number has to fit in one byte so is a number between
  -128 and +128

